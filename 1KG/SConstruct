#! /usr/bin/env python

from __future__ import print_function
import os
import glob
from SCons.Script import Environment, AddOption, GetOption
from collections import defaultdict

# Set up SCons environment
environ = os.environ.copy()
env = Environment(ENV=environ)

# command line arguments
AddOption('--vcfs',
          dest='vcfs',
          type='string',
          metavar='<path>',
          help='path to directory containing 1KG vcf files')
vcf_dir = GetOption('vcfs')
AddOption('--reference',
          dest='reference',
          type='string',
          metavar='<path>',
          help='path to directory containing reference fasta files for each '
               'autosome')
ref_dir = GetOption('reference')
AddOption('--outgroup',
          dest='outgroup',
          type='string',
          metavar='<path>',
          help='path to outgroup fasta')
out_fasta = GetOption('outgroup')
AddOption('--chains',
          dest='chains',
          type='string',
          metavar='<path>',
          help='path to alignment chains file (reference to outgroup)')
chains = GetOption('chains')
AddOption('--kmer',
          dest='kmer',
          type='int',
          default=3,
          metavar='<int>',
          help='context window size for kSFS (default 3)')
k = GetOption('kmer')
AddOption('--samples',
          dest='samples',
          type='string',
          metavar='<path>',
          help='path to file populations for each sample (i.e. '
               'integrated_call_samples_v3.20130502.ALL.panel)')
samples = GetOption('samples')
AddOption('--pops',
          dest='pops',
          type='string',
          metavar='<pop1,pop2,...>',
          default=None,
          help='comma-separated list of populations (default all)')
if GetOption('pops') is None:
    pops = None
else:
    pops = set(GetOption('pops').split(','))
AddOption('--mask',
          dest='mask',
          type='string',
          metavar='<path>',
          help='path to pilot+strict combined accessibility mask bed file')
mask = GetOption('mask')
AddOption('--chrom',
          dest='chrom',
          type='string',
          metavar='<chrom>',
          default=None,
          help='optional automome number (defualt all)')
if GetOption('chrom') is None:
    chromosomes = [f'chr{autosome_num}' for autosome_num in range(1, 23)]
else:
    chromosomes = (GetOption('chrom'),)
AddOption('--outdir',
          type='string',
          metavar="DIR",
          default='scons_output',
          help='directory in which to output results will be created if '
               'nonexistant (default "scons_output")')
outdir = GetOption('outdir')

# parse the --jobs command line argument
n_jobs = GetOption('num_jobs')

# need this so scons -h runs without error
if vcf_dir is not None:
    # strict callability mask, autosomes only
    tgt = [os.path.join(outdir, 'mask.bed.gz'),
           os.path.join(outdir, 'mask.bed.gz.tbi')]
    src = mask
    cmd = ('grep -P "^chr[0-9]*\\t.*strict$" ${SOURCE} | cut -f1-3 '
           '| bgzip > ${TARGETS[0]} && tabix -p bed ${TARGETS[0]}')
    mask = env.Command(tgt, src, cmd)

    # loop over chromosome vcf files
    masked_sizes = []
    vcf_mutation_types = []
    for chrom in chromosomes:
        # get reference FASTA for this chromosome
        ref_fasta = glob.glob(f'{ref_dir}/{chrom}.fa.gz')
        assert len(ref_fasta) == 1
        ref_fasta = ref_fasta[0]

        # get vcf for this chromosome
        vcf = glob.glob(f'{vcf_dir}/*_{chrom}.*.vcf.gz')
        assert len(vcf) == 1
        vcf = vcf[0]

        # estimate ancestral genome for this chromosome
        tgt = os.path.join(outdir, f'ancestor.{chrom}.fa.gz')
        src = [mask[0], vcf, ref_fasta, out_fasta, chains]
        cmd = (f'tabix -p bed ${{SOURCES[0]}} {chrom}: '
               '| mutyper ancestor ${SOURCES[1:]} ${TARGET} --bed -')
        anc_fasta = env.Command(tgt, src, cmd)

        # the effective masked chromosome size after accounting for ancestral
        # state identifiability
        tgt = os.path.join(outdir, f'masked_size.{chrom}.tsv')
        src = [mask[0], anc_fasta]
        cmd = (f'tabix -p bed ${{SOURCES[0]}} {chrom}: '
               f'| mutyper targets ${{SOURCES[1]}} --bed - --k {k} '
               '> ${TARGET}')
        masked_sizes.append(env.Command(tgt, src, cmd))

        # create vcf for this chromosome with kmer mutation type in INFO field
        tgt = os.path.join(outdir, f'mutation_types.{chrom}.vcf')
        src = [mask[0], vcf, anc_fasta]
        cmd = ('bcftools view -T ${SOURCES[0]} -m2 -M2 -v snps -c 1:minor -Ou '
               '-f PASS -U ${SOURCES[1]} '
               f'| mutyper variants ${{SOURCES[2]}} - --k {k} '
               '| bcftools convert -Ob > $TARGET')
        vcf_mutation_types.append(env.Command(tgt, src, cmd))

    # nested dict of superpopulation -> population -> sample list
    superpops = defaultdict(lambda: defaultdict(list))
    with open(samples) as f:
        f.readline()
        for line in f:
            sample, pop, superpop = line.split('\t')[:3]
            if pops is None or pop in pops:
                superpops[superpop][pop].append(sample)

    # loop over populations and compute sample frequency data
    for superpop in superpops:
        for pop in superpops[superpop]:
            # k-SFS
            tgt = os.path.join(outdir, f'{k}-SFS.{superpop}.{pop}.tsv')
            cmd = ('bcftools concat -n -Ou $SOURCES '
                   f'| bcftools view -s {",".join(superpops[superpop][pop])} '
                   '-c 1:minor -Ou '
                   '| mutyper ksfs - > $TARGET')
            freqs = env.Command(tgt, vcf_mutation_types, cmd)

    # masked genome size for mutation rate estimation
    tgt = os.path.join(outdir, f'masked_size.tsv')
    cmd = 'python masked_size_aggregator.py $SOURCES > $TARGET'
    masked_size = env.Command(tgt, masked_sizes, cmd)
